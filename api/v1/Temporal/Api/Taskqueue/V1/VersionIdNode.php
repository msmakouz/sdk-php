<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: temporal/api/taskqueue/v1/message.proto

namespace Temporal\Api\Taskqueue\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Used by the worker versioning APIs, represents a node in the version graph for a particular
 * task queue
 *
 * Generated from protobuf message <code>temporal.api.taskqueue.v1.VersionIdNode</code>
 */
class VersionIdNode extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.VersionId version = 1;</code>
     */
    protected $version = null;
    /**
     * A pointer to the previous version this version is considered to be compatible with
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.VersionIdNode previous_compatible = 2;</code>
     */
    protected $previous_compatible = null;
    /**
     * A pointer to the last incompatible version (previous major version)
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.VersionIdNode previous_incompatible = 3;</code>
     */
    protected $previous_incompatible = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Temporal\Api\Taskqueue\V1\VersionId $version
     *     @type \Temporal\Api\Taskqueue\V1\VersionIdNode $previous_compatible
     *           A pointer to the previous version this version is considered to be compatible with
     *     @type \Temporal\Api\Taskqueue\V1\VersionIdNode $previous_incompatible
     *           A pointer to the last incompatible version (previous major version)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\Taskqueue\V1\Message::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.VersionId version = 1;</code>
     * @return \Temporal\Api\Taskqueue\V1\VersionId|null
     */
    public function getVersion()
    {
        return $this->version;
    }

    public function hasVersion()
    {
        return isset($this->version);
    }

    public function clearVersion()
    {
        unset($this->version);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.VersionId version = 1;</code>
     * @param \Temporal\Api\Taskqueue\V1\VersionId $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Taskqueue\V1\VersionId::class);
        $this->version = $var;

        return $this;
    }

    /**
     * A pointer to the previous version this version is considered to be compatible with
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.VersionIdNode previous_compatible = 2;</code>
     * @return \Temporal\Api\Taskqueue\V1\VersionIdNode|null
     */
    public function getPreviousCompatible()
    {
        return $this->previous_compatible;
    }

    public function hasPreviousCompatible()
    {
        return isset($this->previous_compatible);
    }

    public function clearPreviousCompatible()
    {
        unset($this->previous_compatible);
    }

    /**
     * A pointer to the previous version this version is considered to be compatible with
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.VersionIdNode previous_compatible = 2;</code>
     * @param \Temporal\Api\Taskqueue\V1\VersionIdNode $var
     * @return $this
     */
    public function setPreviousCompatible($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Taskqueue\V1\VersionIdNode::class);
        $this->previous_compatible = $var;

        return $this;
    }

    /**
     * A pointer to the last incompatible version (previous major version)
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.VersionIdNode previous_incompatible = 3;</code>
     * @return \Temporal\Api\Taskqueue\V1\VersionIdNode|null
     */
    public function getPreviousIncompatible()
    {
        return $this->previous_incompatible;
    }

    public function hasPreviousIncompatible()
    {
        return isset($this->previous_incompatible);
    }

    public function clearPreviousIncompatible()
    {
        unset($this->previous_incompatible);
    }

    /**
     * A pointer to the last incompatible version (previous major version)
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.VersionIdNode previous_incompatible = 3;</code>
     * @param \Temporal\Api\Taskqueue\V1\VersionIdNode $var
     * @return $this
     */
    public function setPreviousIncompatible($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Taskqueue\V1\VersionIdNode::class);
        $this->previous_incompatible = $var;

        return $this;
    }

}

